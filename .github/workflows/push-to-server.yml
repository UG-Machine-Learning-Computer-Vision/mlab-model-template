# CI/CD to push code to server
# run python create venv 
# If requirements.txt has changed, install requirements.txt

name: Push to server

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # STOP IF it is template repo
      - if : ${{ github.repository == 'UG-Machine-Learning-Computer-Vision/mlab-model-template' }}
        name: Stop execution
        run: exit 1
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: check if requirements.txt has changed
        id: requirements
        uses: dorny/paths-filter@v2
        with:
          filters: |
            txt:
              - requirements.txt
      - name: push to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.MODELS_PATH }}
            if [ -d ${{ secrets.PROJECT_NAME }} ]; then
              git pull origin main
            else
              gh repo clone UG-Machine-Learning-Computer-Vision/${{ secrets.PROJECT_NAME }}
            fi
            cd ${{ secrets.MODELS_PATH }}/${{ secrets.PROJECT_NAME }}
            git pull origin main
            if [ -f "model.py" ] && [ -f "config.txt" ] && [ -f "requirements.txt" ] && [ -f "__train__.py" ] && [ -f "__test__.py" ]; then 
                echo "All files found"
            else
                echo "Not all files found"
                exit 1
            fi
            if ! command -v python3 &> /dev/null
            then
                echo "Python3 could not be found"
                exit 1
            fi
            if ! command -v pip3 &> /dev/null
            then
                echo "Pip3 could not be found"
                exit 1
            fi
            if [ -d "venv" ]; then
                echo "Virtual environment already exists"
            else
                echo "Creating virtual environment"
                python3 -m venv venv
            fi
            if ${{ steps.requirements.outputs.txt == 'true' }}; then
                source venv/bin/activate
                pip3 install -r requirements.txt
                #  If install fails, exit
                if [ $? -eq 0 ]; then
                    echo "Requirements installed successfully"
                else
                    echo "Requirements installation failed"
                    exit 1
                fi
            fi
            if [ -f ".env" ]; then
                echo ".env file already exists"
                echo "MLAB_API_URL=${{ secrets.MLAB_API_URL }}" >> .env
            else
                echo "Creating .env file"
                touch .env
                echo "MLAB_API_URL=${{ secrets.MLAB_API_URL }}" >> .env
            fi