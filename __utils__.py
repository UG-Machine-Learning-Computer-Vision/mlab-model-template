"""
Do not edit this file
"""
import os


def fetch_parameters(config_path: str = "config.txt"):
    """
    Fetch the parameters from the config.txt file
    All lines with ; are comments
    Lines beginning with PARAM are parameters
    store all the parameters in a dictionary
    """
    parameters: dict = {}
    # Check if config path is valid
    if not os.path.exists(config_path):
        raise FileNotFoundError("Config.txt file not found")
    with open(config_path, "r", encoding="utf-8") as f:
        lines = f.readlines()
        for line in lines:
            if line[0] == ";":
                continue
            else:
                # Split the line by space
                # if first element is PARAM, 
                # then store the second element as key and third element as value
                line_args = line.split(' ')

                if line_args[0] == "PARAM":
                    if line_args[2] == "float":
                        parameters[line_args[1]] = float(line_args[3])
                    elif line_args[2] == "int":
                        parameters[line_args[1]] = int(line_args[3])
                    elif line_args[2] == "str":
                        parameters[line_args[1]] = line_args[3].strip()
                    elif line_args[2] == "list":
                        parameters[line_args[1]] = []
                        # get the type of the list
                        list_type = line_args[3].split("[")[1].split("]")[0]
                        # get the values
                        values = line_args[4].split(",")
                        if list_type == "int":
                            parameters[line_args[1]] = [int(value) for value in values]
                        elif list_type == "float":
                            parameters[line_args[1]] = [float(value) for value in values]
                        elif list_type == "str":
                            parameters[line_args[1]] = [value.strip() for value in values]
                        elif list_type == "bool":
                            parameters[line_args[1]] = [True if value == "true" else False for value in values]
                        else:
                            raise ValueError(f"Unsupported type: {list_type}")
                    elif line_args[2] == "bool":
                        parameters[line_args[1]] = True if line_args[3] == "true" else False
                    else:
                        raise ValueError(f"Unsupported type: {line_args[2]}")
    return parameters

